import Versions.constraintLayoutVersion
import Versions.retrofitVersion

object Deps {
    const val coreKtx = "androidx.core:core-ktx:${Versions.androidCoreVersion}"
    const val constraintLayout = "androidx.constraintlayout:constraintlayout:${constraintLayoutVersion}"
    const val composeUi = "androidx.compose.ui:ui:${Versions.composeVersion}"
    const val composeMaterial = "androidx.compose.material:material:${Versions.composeVersion}"
    const val materialDesign = "com.google.android.material:material:${Versions.materialVersion}"
    const val composeUiTooling = "androidx.compose.ui:ui-tooling-preview:${Versions.composeVersion}"
    const val composeRuntime = "androidx.compose.runtime:runtime-livedata:${Versions.composeRuntimeVersion}"
    const val activityCompose = "androidx.activity:activity-compose:${Versions.activityComposeVersion}"
    const val navigationCompose = "androidx.navigation:navigation-compose:${Versions.navigationComposeVersion}"
    const val hiltNavigationCompose = "androidx.hilt:hilt-navigation-compose:${Versions.hiltNavigationComposeVersion}"
    const val viewmodelCompose = "androidx.lifecycle:lifecycle-viewmodel-compose:${Versions.lifecycleVersion}"
    const val viewmodelComposeLivedata = "androidx.lifecycle:lifecycle-livedata-ktx:${Versions.lifecycleVersion}"
    const val viewmodelComposeRuntime = "androidx.lifecycle:lifecycle-runtime-ktx:${Versions.lifecycleVersion}"
    const val viewmodelComposeViewmodel = "androidx.lifecycle:lifecycle-viewmodel-ktx:${Versions.lifecycleVersion}"
    const val retrofit = "com.squareup.retrofit2:retrofit:${Versions.retrofitVersion}"
    const val picasso = "com.squareup.picasso:picasso:${Versions.picassoVersion}"
    const val moshiRetrofit = "com.squareup.retrofit2:converter-moshi:${Versions.retrofitVersion}"
    const val retrofitGson = "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    const val gson = "com.google.code.gson:gson:${Versions.gsonVersion}"
    const val roomRuntime = "androidx.room:room-runtime:${Versions.roomVersion}"
    const val roomKtx = "androidx.room:room-ktx:${Versions.roomVersion}"
    const val roomCompiler = "androidx.room:room-compiler:${Versions.roomVersion}"
    const val hiltAndroid = "com.google.dagger:hilt-android:${Versions.hiltVersion}"
    const val hiltAndroidCompiler = "com.google.dagger:hilt-compiler:${Versions.hiltVersion}"
    const val composeuiTooling = "androidx.compose.ui:ui-tooling:${Versions.composeVersion}"
    const val appCompat = "com.android.support:appcompat-v7:${Versions.appCompatVersion}"
    const val appSupport = "com.android.support:design:${Versions.appCompatVersion}"
    const val recyclerView = "com.android.support:design:${Versions.recyclerViewVersion}"
    const val jUnit = "junit:junit:${Versions.junitVersion}"
    const val jUnitUi = "androidx.test.ext:junit:${Versions.jUnitVersion}"
    const val espressoCore = "androidx.test.espresso:espresso-core:${Versions.espressoVersion}"
    const val compiseJUnit = "androidx.compose.ui:ui-test-junit4:${Versions.composeVersion}"
    const val coroutinesTest = "org.jetbrains.kotlinx:kotlinx-coroutines-test:${Versions.coroutinesTestVersion}"
    const val architectureTest = "androidx.arch.core:core-testing:${Versions.archTestingVersion}"
    const val mockitoKotlin = "org.mockito.kotlin:mockito-kotlin:${Versions.mockitoKotlinVersion}"
    const val mockitoAndroid = "org.mockito:mockito-android:${Versions.mockitoAndroidVersion}"
    const val mockWebServer = "com.squareup.okhttp3:mockwebserver:${Versions.okHttpVersion}"
    const val composeuiManifest = "androidx.compose.ui:ui-test-manifest:${Versions.composeVersion}"
    const val hiltTesting = "com.google.dagger:hilt-android-testing:${Versions.hiltTestVersion}"
    const val hiltTestingCompiler = "com.google.dagger:hilt-android-compiler:${Versions.hiltTestVersion}"

}
